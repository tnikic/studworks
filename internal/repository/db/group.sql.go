// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: group.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (id, course_uuid)
VALUES ($1, $2)
RETURNING uuid, id, course_uuid
`

type CreateGroupParams struct {
	ID         string
	CourseUuid uuid.UUID
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.ID, arg.CourseUuid)
	var i Group
	err := row.Scan(&i.Uuid, &i.ID, &i.CourseUuid)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE uuid = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGroup, argUuid)
	return err
}

const getGroupByUUID = `-- name: GetGroupByUUID :one
SELECT uuid, id, course_uuid
FROM groups 
WHERE uuid = $1
`

func (q *Queries) GetGroupByUUID(ctx context.Context, argUuid uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByUUID, argUuid)
	var i Group
	err := row.Scan(&i.Uuid, &i.ID, &i.CourseUuid)
	return i, err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET id = $2,
    course_uuid = $3
WHERE uuid = $1
RETURNING uuid, id, course_uuid
`

type UpdateGroupParams struct {
	Uuid       uuid.UUID
	ID         string
	CourseUuid uuid.UUID
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.Uuid, arg.ID, arg.CourseUuid)
	var i Group
	err := row.Scan(&i.Uuid, &i.ID, &i.CourseUuid)
	return i, err
}

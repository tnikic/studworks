// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (subject_uuid, teacher_uid, class_name)
VALUES ($1, $2, $3)
RETURNING uuid, subject_uuid, teacher_uid, class_name
`

type CreateCourseParams struct {
	SubjectUuid uuid.UUID
	TeacherUid  string
	ClassName   string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse, arg.SubjectUuid, arg.TeacherUid, arg.ClassName)
	var i Course
	err := row.Scan(
		&i.Uuid,
		&i.SubjectUuid,
		&i.TeacherUid,
		&i.ClassName,
	)
	return i, err
}

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (name, program_code, semester)
VALUES ($1, $2, $3)
RETURNING uuid, name, program_code, semester
`

type CreateSubjectParams struct {
	Name        string
	ProgramCode string
	Semester    int32
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, arg.Name, arg.ProgramCode, arg.Semester)
	var i Subject
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProgramCode,
		&i.Semester,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses
WHERE uuid = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCourse, argUuid)
	return err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subjects
WHERE uuid = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubject, argUuid)
	return err
}

const getCourseByUUID = `-- name: GetCourseByUUID :one
SELECT uuid, subject_uuid, teacher_uid, class_name
FROM courses
WHERE uuid = $1
`

func (q *Queries) GetCourseByUUID(ctx context.Context, argUuid uuid.UUID) (Course, error) {
	row := q.db.QueryRow(ctx, getCourseByUUID, argUuid)
	var i Course
	err := row.Scan(
		&i.Uuid,
		&i.SubjectUuid,
		&i.TeacherUid,
		&i.ClassName,
	)
	return i, err
}

const getSubjectByUUID = `-- name: GetSubjectByUUID :one
SELECT uuid, name, program_code, semester
FROM subjects
WHERE uuid = $1
`

func (q *Queries) GetSubjectByUUID(ctx context.Context, argUuid uuid.UUID) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubjectByUUID, argUuid)
	var i Subject
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProgramCode,
		&i.Semester,
	)
	return i, err
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE courses
SET subject_uuid = $2,
    teacher_uid = $3,
    class_name = $4
WHERE uuid = $1
RETURNING uuid, subject_uuid, teacher_uid, class_name
`

type UpdateCourseParams struct {
	Uuid        uuid.UUID
	SubjectUuid uuid.UUID
	TeacherUid  string
	ClassName   string
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, updateCourse,
		arg.Uuid,
		arg.SubjectUuid,
		arg.TeacherUid,
		arg.ClassName,
	)
	var i Course
	err := row.Scan(
		&i.Uuid,
		&i.SubjectUuid,
		&i.TeacherUid,
		&i.ClassName,
	)
	return i, err
}

const updateSubject = `-- name: UpdateSubject :one
UPDATE subjects
SET name = $2,
    program_code = $3,
    semester = $4
WHERE uuid = $1
RETURNING uuid, name, program_code, semester
`

type UpdateSubjectParams struct {
	Uuid        uuid.UUID
	Name        string
	ProgramCode string
	Semester    int32
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) (Subject, error) {
	row := q.db.QueryRow(ctx, updateSubject,
		arg.Uuid,
		arg.Name,
		arg.ProgramCode,
		arg.Semester,
	)
	var i Subject
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProgramCode,
		&i.Semester,
	)
	return i, err
}

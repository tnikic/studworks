// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProjectParticipant = `-- name: CreateProjectParticipant :one
INSERT INTO project_participants (student_uid, project_uuid, points_earned)
VALUES ($1, $2, $3)
RETURNING uuid, points_earned, student_uid, project_uuid
`

type CreateProjectParticipantParams struct {
	StudentUid   string
	ProjectUuid  uuid.UUID
	PointsEarned int32
}

func (q *Queries) CreateProjectParticipant(ctx context.Context, arg CreateProjectParticipantParams) (ProjectParticipant, error) {
	row := q.db.QueryRow(ctx, createProjectParticipant, arg.StudentUid, arg.ProjectUuid, arg.PointsEarned)
	var i ProjectParticipant
	err := row.Scan(
		&i.Uuid,
		&i.PointsEarned,
		&i.StudentUid,
		&i.ProjectUuid,
	)
	return i, err
}

const createaProject = `-- name: CreateaProject :one
INSERT INTO projects (title, status, possible_points, course_uuid)
VALUES ($1, $2, $3, $4)
RETURNING uuid, title, status, possible_points, course_uuid
`

type CreateaProjectParams struct {
	Title          string
	Status         string
	PossiblePoints int32
	CourseUuid     uuid.UUID
}

func (q *Queries) CreateaProject(ctx context.Context, arg CreateaProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createaProject,
		arg.Title,
		arg.Status,
		arg.PossiblePoints,
		arg.CourseUuid,
	)
	var i Project
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Status,
		&i.PossiblePoints,
		&i.CourseUuid,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE uuid = $1
`

func (q *Queries) DeleteProject(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, argUuid)
	return err
}

const deleteProjectParticipant = `-- name: DeleteProjectParticipant :exec
DELETE FROM project_participants
WHERE uuid = $1
`

func (q *Queries) DeleteProjectParticipant(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProjectParticipant, argUuid)
	return err
}

const getProjectByUUID = `-- name: GetProjectByUUID :one
SELECT uuid, title, status, possible_points, course_uuid
FROM projects
WHERE uuid = $1
`

func (q *Queries) GetProjectByUUID(ctx context.Context, argUuid uuid.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByUUID, argUuid)
	var i Project
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Status,
		&i.PossiblePoints,
		&i.CourseUuid,
	)
	return i, err
}

const getProjectParticipantByUUID = `-- name: GetProjectParticipantByUUID :one
SELECT uuid, points_earned, student_uid, project_uuid
FROM project_participants
WHERE uuid = $1
`

func (q *Queries) GetProjectParticipantByUUID(ctx context.Context, argUuid uuid.UUID) (ProjectParticipant, error) {
	row := q.db.QueryRow(ctx, getProjectParticipantByUUID, argUuid)
	var i ProjectParticipant
	err := row.Scan(
		&i.Uuid,
		&i.PointsEarned,
		&i.StudentUid,
		&i.ProjectUuid,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET title = $2,
    status = $3,
    possible_points = $4,
    course_uuid = $5
WHERE uuid = $1
RETURNING uuid, title, status, possible_points, course_uuid
`

type UpdateProjectParams struct {
	Uuid           uuid.UUID
	Title          string
	Status         string
	PossiblePoints int32
	CourseUuid     uuid.UUID
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.Uuid,
		arg.Title,
		arg.Status,
		arg.PossiblePoints,
		arg.CourseUuid,
	)
	var i Project
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Status,
		&i.PossiblePoints,
		&i.CourseUuid,
	)
	return i, err
}

const updateProjectParticipant = `-- name: UpdateProjectParticipant :one
UPDATE project_participants
SET student_uid = $2,
    project_uuid = $3,
    points_earned = $4
WHERE uuid = $1
RETURNING uuid, points_earned, student_uid, project_uuid
`

type UpdateProjectParticipantParams struct {
	Uuid         uuid.UUID
	StudentUid   string
	ProjectUuid  uuid.UUID
	PointsEarned int32
}

func (q *Queries) UpdateProjectParticipant(ctx context.Context, arg UpdateProjectParticipantParams) (ProjectParticipant, error) {
	row := q.db.QueryRow(ctx, updateProjectParticipant,
		arg.Uuid,
		arg.StudentUid,
		arg.ProjectUuid,
		arg.PointsEarned,
	)
	var i ProjectParticipant
	err := row.Scan(
		&i.Uuid,
		&i.PointsEarned,
		&i.StudentUid,
		&i.ProjectUuid,
	)
	return i, err
}

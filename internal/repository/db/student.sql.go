// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (uid, first_name, last_name, email, active, class_name)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING uid, first_name, last_name, email, active, class_name
`

type CreateStudentParams struct {
	Uid       string
	FirstName string
	LastName  string
	Email     string
	Active    bool
	ClassName string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.Uid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Active,
		arg.ClassName,
	)
	var i Student
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.ClassName,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE uid = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, uid string) error {
	_, err := q.db.Exec(ctx, deleteStudent, uid)
	return err
}

const getStudentByUID = `-- name: GetStudentByUID :one
SELECT uid, first_name, last_name, email, active, class_name
FROM students 
WHERE uid = $1
`

func (q *Queries) GetStudentByUID(ctx context.Context, uid string) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByUID, uid)
	var i Student
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.ClassName,
	)
	return i, err
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET first_name = $2,
    last_name = $3,
    email = $4,
    active = $5,
    class_name = $6
WHERE uid = $1
RETURNING uid, first_name, last_name, email, active, class_name
`

type UpdateStudentParams struct {
	Uid       string
	FirstName string
	LastName  string
	Email     string
	Active    bool
	ClassName string
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudent,
		arg.Uid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Active,
		arg.ClassName,
	)
	var i Student
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
		&i.ClassName,
	)
	return i, err
}

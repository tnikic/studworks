// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: class.sql

package db

import (
	"context"
)

const createClass = `-- name: CreateClass :one
INSERT INTO classes (name, program_code, year, study_type, active)
VALUES ($1, $2, $3, $4, $5)
RETURNING name, program_code, year, study_type, active
`

type CreateClassParams struct {
	Name        string
	ProgramCode string
	Year        int32
	StudyType   string
	Active      bool
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRow(ctx, createClass,
		arg.Name,
		arg.ProgramCode,
		arg.Year,
		arg.StudyType,
		arg.Active,
	)
	var i Class
	err := row.Scan(
		&i.Name,
		&i.ProgramCode,
		&i.Year,
		&i.StudyType,
		&i.Active,
	)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes
WHERE name = $1
`

func (q *Queries) DeleteClass(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteClass, name)
	return err
}

const getClassByName = `-- name: GetClassByName :one
SELECT name, program_code, year, study_type, active
FROM classes 
WHERE name = $1
`

func (q *Queries) GetClassByName(ctx context.Context, name string) (Class, error) {
	row := q.db.QueryRow(ctx, getClassByName, name)
	var i Class
	err := row.Scan(
		&i.Name,
		&i.ProgramCode,
		&i.Year,
		&i.StudyType,
		&i.Active,
	)
	return i, err
}

const updateClass = `-- name: UpdateClass :one
UPDATE classes
SET program_code = $2,
    year = $3,
    study_type = $4,
    active = $5
WHERE name = $1
RETURNING name, program_code, year, study_type, active
`

type UpdateClassParams struct {
	Name        string
	ProgramCode string
	Year        int32
	StudyType   string
	Active      bool
}

func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) (Class, error) {
	row := q.db.QueryRow(ctx, updateClass,
		arg.Name,
		arg.ProgramCode,
		arg.Year,
		arg.StudyType,
		arg.Active,
	)
	var i Class
	err := row.Scan(
		&i.Name,
		&i.ProgramCode,
		&i.Year,
		&i.StudyType,
		&i.Active,
	)
	return i, err
}

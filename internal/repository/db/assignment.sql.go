// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assignment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAssignment = `-- name: CreateAssignment :one
INSERT INTO assignments (assignment_template_uuid, student_uid, course_uuid, possible_points, points_earned)
VALUES ($1, $2, $3, $4, $5)
RETURNING uuid, assignment_template_uuid, student_uid, course_uuid, possible_points, points_earned
`

type CreateAssignmentParams struct {
	AssignmentTemplateUuid uuid.UUID
	StudentUid             string
	CourseUuid             uuid.UUID
	PossiblePoints         int32
	PointsEarned           int32
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRow(ctx, createAssignment,
		arg.AssignmentTemplateUuid,
		arg.StudentUid,
		arg.CourseUuid,
		arg.PossiblePoints,
		arg.PointsEarned,
	)
	var i Assignment
	err := row.Scan(
		&i.Uuid,
		&i.AssignmentTemplateUuid,
		&i.StudentUid,
		&i.CourseUuid,
		&i.PossiblePoints,
		&i.PointsEarned,
	)
	return i, err
}

const createAssignmentTemplate = `-- name: CreateAssignmentTemplate :one
INSERT INTO assignment_templates (title)
VALUES ($1)
RETURNING uuid, title
`

func (q *Queries) CreateAssignmentTemplate(ctx context.Context, title string) (AssignmentTemplate, error) {
	row := q.db.QueryRow(ctx, createAssignmentTemplate, title)
	var i AssignmentTemplate
	err := row.Scan(&i.Uuid, &i.Title)
	return i, err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignments
WHERE uuid = $1
`

func (q *Queries) DeleteAssignment(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssignment, argUuid)
	return err
}

const deleteAssignmentTemplate = `-- name: DeleteAssignmentTemplate :exec
DELETE FROM assignment_templates
WHERE uuid = $1
`

func (q *Queries) DeleteAssignmentTemplate(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssignmentTemplate, argUuid)
	return err
}

const getAssignmentByUUID = `-- name: GetAssignmentByUUID :one
SELECT uuid, assignment_template_uuid, student_uid, course_uuid, possible_points, points_earned
FROM assignments
WHERE uuid = $1
`

func (q *Queries) GetAssignmentByUUID(ctx context.Context, argUuid uuid.UUID) (Assignment, error) {
	row := q.db.QueryRow(ctx, getAssignmentByUUID, argUuid)
	var i Assignment
	err := row.Scan(
		&i.Uuid,
		&i.AssignmentTemplateUuid,
		&i.StudentUid,
		&i.CourseUuid,
		&i.PossiblePoints,
		&i.PointsEarned,
	)
	return i, err
}

const getAssignmentTemplateByUUID = `-- name: GetAssignmentTemplateByUUID :one
SELECT uuid, title
FROM assignment_templates
WHERE uuid = $1
`

func (q *Queries) GetAssignmentTemplateByUUID(ctx context.Context, argUuid uuid.UUID) (AssignmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssignmentTemplateByUUID, argUuid)
	var i AssignmentTemplate
	err := row.Scan(&i.Uuid, &i.Title)
	return i, err
}

const updateAssignment = `-- name: UpdateAssignment :one
UPDATE assignments
SET assignment_template_uuid = $2,
    student_uid = $3,
    course_uuid = $4,
    possible_points = $5,
    points_earned = $6
WHERE uuid = $1
RETURNING uuid, assignment_template_uuid, student_uid, course_uuid, possible_points, points_earned
`

type UpdateAssignmentParams struct {
	Uuid                   uuid.UUID
	AssignmentTemplateUuid uuid.UUID
	StudentUid             string
	CourseUuid             uuid.UUID
	PossiblePoints         int32
	PointsEarned           int32
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRow(ctx, updateAssignment,
		arg.Uuid,
		arg.AssignmentTemplateUuid,
		arg.StudentUid,
		arg.CourseUuid,
		arg.PossiblePoints,
		arg.PointsEarned,
	)
	var i Assignment
	err := row.Scan(
		&i.Uuid,
		&i.AssignmentTemplateUuid,
		&i.StudentUid,
		&i.CourseUuid,
		&i.PossiblePoints,
		&i.PointsEarned,
	)
	return i, err
}

const updateAssignmentTemplate = `-- name: UpdateAssignmentTemplate :one
UPDATE assignment_templates
SET title = $2
WHERE uuid = $1
RETURNING uuid, title
`

type UpdateAssignmentTemplateParams struct {
	Uuid  uuid.UUID
	Title string
}

func (q *Queries) UpdateAssignmentTemplate(ctx context.Context, arg UpdateAssignmentTemplateParams) (AssignmentTemplate, error) {
	row := q.db.QueryRow(ctx, updateAssignmentTemplate, arg.Uuid, arg.Title)
	var i AssignmentTemplate
	err := row.Scan(&i.Uuid, &i.Title)
	return i, err
}

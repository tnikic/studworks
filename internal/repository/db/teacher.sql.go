// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teacher.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (uid, first_name, last_name, email, active)
VALUES ($1, $2, $3, $4, $5)
RETURNING uid, first_name, last_name, email, active
`

type CreateTeacherParams struct {
	Uid       string
	FirstName string
	LastName  string
	Email     string
	Active    bool
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher,
		arg.Uid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Active,
	)
	var i Teacher
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
	)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE uid = $1
`

func (q *Queries) DeleteTeacher(ctx context.Context, uid string) error {
	_, err := q.db.Exec(ctx, deleteTeacher, uid)
	return err
}

const getTeacherByUID = `-- name: GetTeacherByUID :one
SELECT uid, first_name, last_name, email, active
FROM teachers 
WHERE uid = $1
`

func (q *Queries) GetTeacherByUID(ctx context.Context, uid string) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherByUID, uid)
	var i Teacher
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
	)
	return i, err
}

const updateTeacher = `-- name: UpdateTeacher :one
UPDATE teachers
SET first_name = $2,
    last_name = $3,
    email = $4,
    active = $5
WHERE uid = $1
RETURNING uid, first_name, last_name, email, active
`

type UpdateTeacherParams struct {
	Uid       string
	FirstName string
	LastName  string
	Email     string
	Active    bool
}

func (q *Queries) UpdateTeacher(ctx context.Context, arg UpdateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, updateTeacher,
		arg.Uid,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Active,
	)
	var i Teacher
	err := row.Scan(
		&i.Uid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Active,
	)
	return i, err
}
